// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cluster.bytebuilders.dev_cloudcredentials.yaml
// cluster.bytebuilders.dev_clusterauthinfotemplates.yaml
// cluster.bytebuilders.dev_clusterinfos.yaml
// cluster.bytebuilders.dev_clusters.yaml
// cluster.bytebuilders.dev_clusteruserauths.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterBytebuildersDev_cloudcredentialsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x41\xaf\xdb\xb6\x0f\xbf\xe7\x53\x10\xf8\x1f\x7a\x69\x1c\x14\xff\x61\x18\x72\x0b\x5e\x87\xe2\xa1\x1d\x5a\x34\x0f\xbd\xcb\x32\xe3\x68\x91\x25\x8d\xa2\xf2\x9a\x0e\xfb\xee\x83\x64\x3b\xf1\x4b\x14\xb7\x71\xfb\xb0\xcd\x37\x93\x14\x45\xfe\x7e\x14\x4d\x4b\x38\xf5\x09\xc9\x2b\x6b\x96\x20\x9c\xc2\xcf\x8c\x26\xbe\xf9\x62\xf7\x8b\x2f\x94\x5d\xec\x5f\xcd\x76\xca\x54\x4b\xb8\x0b\x9e\x6d\xf3\x11\xbd\x0d\x24\xf1\x35\x6e\x94\x51\xac\xac\x99\x35\xc8\xa2\x12\x2c\x96\x33\x00\x49\x28\xa2\xf0\x41\x35\xe8\x59\x34\x6e\x09\x26\x68\x3d\x03\xd0\xa2\x44\xed\xa3\x0d\x80\x70\xae\xd8\x85\x12\xc9\x20\x63\xda\xc5\x88\x06\x97\x50\x1e\x18\xcb\xa0\x74\x85\xe4\x67\x00\xad\x50\x6a\x1b\x2a\x49\x58\xa1\x61\x25\xb4\x2f\xa4\x0e\x9e\x91\x8a\xa1\x75\x51\xe1\x7e\xe6\x1d\xca\xb8\x41\x4d\x36\xb8\xb8\xf0\x8a\x5d\xeb\xb9\x8b\x45\x0a\xc6\xda\x92\xea\xdf\xe7\x70\x8a\xac\x13\x50\x97\xf3\xbc\xb1\x15\xea\x4e\x28\x9c\xf3\xd2\x56\x98\x5e\x3b\x84\x62\xa4\x77\xc7\x48\x93\x46\x2b\xcf\x6f\x73\xda\x77\xca\x73\xb2\x70\x3a\x90\xd0\x97\x79\x26\xa5\x57\xa6\x0e\x5a\xd0\x85\x7a\x06\xe0\xa5\x75\x18\xfd\xa6\x34\x67\x00\xfb\x96\xc8\x94\xc8\xbc\x43\x6f\xff\x4a\x68\xb7\x15\xaf\x5a\x6f\x72\x8b\x8d\x68\xf3\x04\xb0\x0e\xcd\xea\xc3\xfd\xa7\xff\xaf\x9f\x88\x01\x1c\x59\x87\xc4\x47\x48\xda\x67\x50\x29\x03\x29\x40\x85\x5e\x92\x72\x9c\x4a\xe8\x45\x74\xd8\x5a\x41\x15\x4b\x04\x3d\xf0\x16\xfb\xd0\xb0\xea\x62\x00\xbb\x01\xde\x2a\x0f\x84\x8e\xd0\xa3\xe1\x54\x36\x4f\x1c\x43\x34\x12\x06\x6c\xf9\x3b\x4a\x2e\x60\x8d\x14\xdd\x80\xdf\xda\xa0\x2b\x90\xd6\xec\x91\x18\x08\xa5\xad\x8d\xfa\x72\xf4\xed\x81\x6d\xda\x54\x0b\xc6\x0e\xe4\xd3\xa3\x0c\x23\x19\xa1\x61\x2f\x74\xc0\x97\x20\x4c\x05\x8d\x38\x00\x61\xdc\x05\x82\x19\xf8\x4b\x26\xbe\x80\xdf\x2c\x21\x28\xb3\xb1\x4b\xd8\x32\x3b\xbf\x5c\x2c\x6a\xc5\xfd\x09\x91\xb6\x69\x82\x51\x7c\x58\x48\x6b\x98\x54\x19\xd8\x92\x5f\x54\xb8\x47\xbd\xf0\xaa\x9e\x0b\x92\x5b\xc5\x28\x39\x10\x2e\x84\x53\xf3\x14\xba\xe1\x74\xcc\x9a\xea\x7f\x7d\x7d\xf9\x17\x4f\x62\xe5\x43\xa4\xd7\x33\x29\x53\x0f\x14\xa9\xd6\x46\x18\x88\xd5\x06\xca\x83\xe8\x96\xb6\x59\x9c\x80\x8e\xa2\x88\xce\xc7\x5f\xd7\x0f\xc7\xd2\x4e\x64\x9c\xa3\x9f\x70\x3f\x2d\xf4\x27\x0a\x22\x60\xca\x6c\x90\x5a\x12\x37\x64\x9b\xe4\x13\x4d\xe5\xac\x32\x9c\x5e\xa4\x56\x68\xce\xe1\xf7\xa1\x6c\x14\x47\xde\xff\x08\xe8\x39\x72\x55\xc0\x9d\x30\xc6\x32\x94\x08\xc1\x55\x82\xb1\x2a\xe0\xde\xc0\x9d\x68\x50\xdf\x09\x8f\xcf\x4e\x40\x44\xda\xcf\x23\xb0\xdf\x46\xc1\xb0\xe3\x9d\x1b\xb7\xa8\x0d\x14\x7d\x57\x3a\x3d\xf9\xf3\x15\x1f\xf1\x78\x21\x1a\x33\x4f\x4b\xa4\x44\xef\xdf\xe2\xe1\xfe\x75\x4e\x7d\x35\x87\x63\x78\x28\x09\x79\xd5\x7b\x99\xe0\x23\x52\xa9\x08\xab\xcb\xa5\xf3\x61\x74\x19\xed\xd9\xde\x17\x16\x57\x10\x4d\x69\x7f\x09\x84\xb7\x62\xd5\x56\xe4\x44\xa0\xda\xc5\xeb\x14\xf2\x34\xa4\x43\x79\x3c\xa7\x13\x63\x60\x34\x62\x62\x02\x63\x2c\xf5\xb8\x5c\x55\xb5\x59\xe7\x18\x7c\x92\x53\xc6\xa0\x8f\xf8\x66\x6e\xd7\x6c\x49\xd4\x37\x53\x2c\xa4\xb4\xc1\x4c\x23\x68\xf7\x1c\xe5\x1f\xa3\xc9\x68\x76\xb7\x95\x7b\xa5\x6a\xc5\x42\x5b\x89\xc2\xdc\x0a\x09\xdb\x1d\x66\x16\x7d\x57\x62\xc9\xe7\x2d\x09\xd4\xd6\xd6\x1a\xd3\x0c\x74\x6b\xfc\x8e\x6c\x74\x38\xb9\xbf\xd1\x5e\x49\x5c\x4d\xae\x8b\x31\x18\x8e\xa1\x65\x9b\xdb\x70\xe3\xdb\xb1\x7a\xbf\x0a\xbc\x9d\xf6\x35\x78\x98\xc8\xf8\x3f\xdd\x21\xf1\xb3\x53\x74\xe5\x0c\x6e\x2c\x35\x82\x97\x71\x7e\xfb\xf9\xa7\x11\xe7\x71\xbe\xab\xd3\x38\x7c\xfe\x10\x6e\x08\xfd\x76\x3a\x38\x69\xe0\xce\xc2\x0e\xa0\x18\x9b\x2b\xaa\xaf\xfa\xed\x0d\x04\x91\xb8\xec\x0a\x5f\xff\xbc\x3e\x64\x0f\xe3\xf4\xb6\x3e\x52\x9a\x5a\x19\x5b\xdd\xdc\x94\xff\x15\x1d\x28\xfd\x0f\x5d\x59\x90\xdd\xdf\x3e\x1a\xa4\xdc\x51\x18\x2f\xc5\xb1\x32\x74\x42\xee\x72\x67\xe3\x2b\x87\xda\xa9\x69\x93\xd9\xf7\xf5\xce\xd1\xc2\x4b\x21\xdd\xd4\x11\x47\xa8\xf1\x52\x68\x7c\x14\x99\x14\xc7\x81\xb1\x54\x0b\xa3\xbe\xa4\x5f\xc7\x69\xf3\xd4\x33\x14\xe6\x30\xa8\x1f\x51\xb7\x49\x75\xb1\x00\x4d\x68\x72\xbb\xaf\x1e\xcf\x7f\xe3\x92\x34\x4e\x54\xd7\xe4\xdd\xa4\x95\x51\xbf\x6e\xa7\x8e\xf7\x71\xea\xc8\xa8\xdf\x9c\xbe\xe9\x57\xb5\xe9\x2b\x96\xd1\xbe\x4b\x8d\x24\xa3\xf8\x90\x8e\x48\x46\xb1\xee\x8a\x24\xa3\xfa\x14\x34\x5f\x76\xfc\x11\x06\xf7\x71\xc1\x7f\xb0\x8b\xe5\x5d\xb5\x77\x3d\x67\xa2\xae\x7b\x9d\x49\xa3\xe7\xd9\x37\x6c\xe5\x59\x70\xf0\xdf\xfa\xdb\x6a\xcb\x38\xec\x60\xf5\x06\x0d\xd2\x95\xd3\xf8\xe4\x92\xe2\xfd\xc5\x02\x50\xed\x45\x51\x63\x7d\xba\xd2\x41\xc3\x50\x9f\xb4\xfd\x0e\x19\xf4\x37\x96\xfa\xab\xa4\xf6\x2e\xa3\x80\x7b\x06\x69\x89\xd0\x3b\x6b\xaa\xe3\x75\x50\xaf\x7f\xe1\x07\x9e\x5f\x66\x3c\x3e\x6e\x95\xdc\xc6\x80\xba\xdb\x08\xb0\x06\x9a\xd0\xde\x50\x41\x79\x48\xce\x56\x1f\xee\xbb\xdb\x90\xe2\x87\x7d\x1f\xb2\x5c\x5c\x08\x5b\x20\x96\xc0\x14\x5a\x2a\x7d\xf7\xa7\x34\x90\x84\xf2\x78\xa7\xd4\x33\xd1\x31\x0a\x7f\xfe\x35\xfb\x3b\x00\x00\xff\xff\x0f\xb5\x8e\x2c\xf4\x15\x00\x00")

func clusterBytebuildersDev_cloudcredentialsYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_cloudcredentialsYaml,
		"cluster.bytebuilders.dev_cloudcredentials.yaml",
	)
}

func clusterBytebuildersDev_cloudcredentialsYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_cloudcredentialsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_cloudcredentials.yaml", size: 5620, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBytebuildersDev_clusterauthinfotemplatesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xcd\x6e\x1b\x37\x10\xbe\xeb\x29\x06\xe8\x21\x97\x48\x42\xd0\xa2\x28\x74\x33\x9c\x20\x10\x92\xa0\x46\xec\xe4\xce\x25\x47\x2b\xd6\xbb\x24\xcb\x19\xca\x51\x8b\xbe\x7b\x31\xdc\x5d\x69\xbd\x3f\xb2\x5a\x34\xe5\x8d\xe4\x70\x38\xdf\x37\x7f\xa4\x0a\xf6\x2b\x46\xb2\xde\x6d\x40\x05\x8b\xdf\x18\x9d\xcc\x68\xf5\xf8\x0b\xad\xac\x5f\x1f\xde\x2c\x1e\xad\x33\x1b\xb8\x4d\xc4\xbe\xfe\x8c\xe4\x53\xd4\xf8\x16\x77\xd6\x59\xb6\xde\x2d\x6a\x64\x65\x14\xab\xcd\x02\x40\x47\x54\xb2\xf8\x60\x6b\x24\x56\x75\xd8\x80\x4b\x55\xb5\x00\xa8\x54\x81\x15\x89\x0c\x80\x0a\x61\xf5\x98\x0a\x8c\x0e\x19\xf3\x2d\x4e\xd5\xb8\x81\xe2\xc8\x58\x24\x5b\x19\x8c\xb4\x00\x68\x16\x75\x95\x88\x31\xaa\xc4\x7b\xeb\x76\x9e\xb1\x0e\x95\x92\x63\xed\xc6\xaa\x7f\x6a\x65\xf0\xb0\xa0\x80\x5a\x2e\x2a\xa3\x4f\xe1\xa4\x60\x2c\xd7\xdc\xd0\xda\xa4\x15\x63\xe9\xa3\xed\xe6\x4b\x38\x5b\xd8\x2e\xc4\x16\xfb\xb2\xf6\x06\xab\x76\x51\x85\x40\xda\x1b\xcc\xd3\x96\xa9\xe6\xc2\x9b\xc4\xfb\xad\xdb\xf9\x87\xd6\xe2\x2c\x51\x59\xe2\x0f\x97\xa4\x3e\x5a\xe2\x2c\x19\xaa\x14\x55\x35\x8f\x3f\x0b\x91\x75\x65\xaa\x54\x9c\x15\x5b\x00\x90\xf6\x01\x4f\xf7\x2d\x00\x0e\x8d\xc3\x33\xd0\x65\xcb\xf2\xe1\x8d\xaa\xc2\x5e\xbd\x69\xb4\xea\x3d\xd6\xaa\xe1\x01\xc0\x07\x74\x37\x77\xdb\xaf\x3f\xde\x3f\x5b\x06\x08\xd1\x07\x8c\x7c\xa2\xac\x19\xbd\x88\xea\xad\x02\x18\x24\x1d\x6d\xe0\x1c\x6a\xaf\x44\x61\x23\x05\x46\x42\x09\x09\x78\x8f\x9d\x69\x68\x5a\x1b\xc0\xef\x80\xf7\x96\x20\x62\x88\x48\xe8\x38\x87\xd7\x33\xc5\x20\x42\xca\x81\x2f\x7e\x43\xcd\x2b\xb8\xc7\x28\x6a\x80\xf6\x3e\x55\x06\xb4\x77\x07\x8c\x0c\x11\xb5\x2f\x9d\xfd\xe3\xa4\x9b\x80\x7d\xbe\x34\xd3\xc9\x03\x9d\xd6\x31\x46\xa7\x2a\x38\xa8\x2a\xe1\x6b\x50\xce\x40\xad\x8e\x10\x51\x6e\x81\xe4\x7a\xfa\xb2\x08\xad\xe0\x93\x8f\x08\xc2\xfe\x06\xf6\xcc\x81\x36\xeb\x75\x69\xb9\xcb\x24\xed\xeb\x3a\x39\xcb\xc7\xb5\xf6\x8e\xa3\x2d\x12\xfb\x48\x6b\x83\x07\xac\xd6\x64\xcb\xa5\x8a\x7a\x6f\x19\x35\xa7\x88\x6b\x15\xec\x32\x9b\xee\x38\xa7\x63\x6d\x7e\xe8\xe2\x8f\x5e\x3d\xb3\x95\x8f\xe2\x5e\xe2\x68\x5d\xd9\xdb\xc8\xb1\x78\xc1\x03\x12\x85\x60\x09\x54\x7b\xb4\x41\x71\x26\x5a\x96\x84\x9d\xcf\xef\xee\x1f\x4e\xa1\x9f\x9d\x31\x64\x3f\xf3\x7e\x3e\x48\x67\x17\x08\x61\xd6\xed\x30\x36\x4e\xdc\x45\x5f\x67\x9d\xe8\x4c\xf0\xd6\x71\x9e\xe8\xca\xa2\x1b\xd2\x4f\xa9\xa8\x2d\x8b\xdf\x7f\x4f\x48\x2c\xbe\x5a\xc1\xad\x72\xce\x33\x14\x08\x29\x18\xc5\x68\x56\xb0\x75\x70\xab\x6a\xac\x6e\x15\xe1\x77\x77\x80\x30\x4d\x4b\x21\xf6\x3a\x17\xf4\x2b\xe3\x50\xb8\x61\xad\xb7\xd1\x55\xad\xf3\x98\xce\x2f\x19\x92\xe5\x77\xd1\x1f\xac\xc1\x38\xdc\x1b\xf8\xf9\xa6\x27\x9a\xef\xb0\x3b\x8b\xe2\x75\x9d\xeb\x79\x56\x25\x10\x75\x4e\x2c\xa9\x3a\xa5\x1d\xe6\x97\x8c\x9d\x8f\xd9\x5b\xe7\xaa\x78\x2a\xac\x23\xe9\x79\xc3\x65\x68\xef\x76\xb6\x9c\xda\x01\x50\xc6\xe4\xa6\xa2\xaa\xbb\x8b\x3a\x60\x9e\xf4\xa1\xc0\x88\xe8\x6e\xe4\xc2\x77\xe1\xe0\x8c\x66\x89\x48\x1b\xd1\x8c\x8f\x36\xb5\x74\xb4\x7c\xc1\x0c\x2d\x08\x77\xc2\x3d\x8a\x9f\x7c\xb4\x7c\x7c\x3b\x0a\x18\x18\xfa\xf4\x76\xe6\x98\x50\xcb\xca\x3a\x82\xbb\x77\x9f\x96\xe8\xa4\x2f\x99\xfe\x25\x13\x68\x55\xa7\xa0\x2f\x47\x63\x9f\xee\x7c\xac\x15\x37\x3d\x7a\x06\xe2\x24\x61\x4d\x76\xf7\x2c\xbe\x06\xdf\xd4\x99\x69\x70\x92\x5e\xb9\xae\x4c\x41\x6b\x2f\xcf\xc8\x60\x67\x2b\xcc\x51\xfc\xf0\xf1\xfe\xbf\x86\xf7\x01\xaf\x72\x5b\x5f\xf6\x05\x38\x27\xe3\x27\x70\x3d\xe2\xf1\x3b\xa1\xb1\x75\xc0\x48\xde\x29\x9e\xc8\x8c\x67\x58\xb6\x67\x49\x69\x22\x52\x19\x12\x49\xc3\xac\x51\xda\xaa\xd2\xbc\x54\x13\x51\x74\xdd\xdd\xef\xe5\xe1\x36\x91\xf7\x73\x16\x34\xf2\x9d\x1d\x65\x33\x63\xdf\x57\x39\x36\xc5\x32\xd6\x93\xb5\xe5\x62\xf6\x37\x9b\x2a\x46\x75\x9c\xb7\xff\x0b\x61\x7c\xf7\x8d\xe3\x44\x40\x5c\x5b\xe0\x9e\x41\xcd\xba\xbe\xe6\xf6\x5c\x2b\x7a\x6c\x9f\x4a\x79\x4e\x5e\xaa\x2d\xfb\x22\xed\x40\x2b\x07\x25\x3a\x8c\xd3\x99\x3e\x0b\xf8\xc5\x52\x3a\x0f\x7a\xde\x27\x27\x0e\xce\x81\x7e\xc6\x9e\x7b\xb4\x84\xe8\xf8\x2d\x07\x6d\xaf\xe9\xd1\x69\x72\x68\xcd\x05\xd3\x64\x61\xf5\x4f\x0e\xe3\xf6\xed\x18\x6d\x97\x19\xd6\xf1\xcf\x3f\xcd\x68\x94\xa7\x5f\x99\x5f\xca\xfd\x11\x14\xd1\x93\x8f\x13\x75\xff\x19\x05\x77\xad\x58\x17\x8d\xdd\xb1\x0c\xaa\x50\x64\xf5\xb0\xe5\xb2\x9f\xa2\xfc\xca\x56\x7b\xc1\x73\xec\x1f\xd1\xbd\x60\xed\x83\xc8\x74\xa6\x16\xa8\xa2\x3c\xd5\xf2\x9a\x98\x3b\x32\x74\x60\xd6\x54\x73\xff\x17\x86\x26\x3b\x41\xea\x25\xf9\xb6\xd0\xbc\x80\xed\x4b\x57\x8f\x86\xf5\xe9\x7f\xf6\xc4\xf4\x83\x61\xd9\xc5\xe8\x60\x35\x59\x73\xd5\x6b\x91\x15\x27\xba\xf6\xbd\xe8\x0b\x92\x17\xb9\x79\xdf\x54\x87\xd1\xdf\x6c\xc4\xdd\xaf\xa3\x03\x1d\x8b\xb5\xa7\xfc\x97\x92\xbe\x5a\x9e\x77\xbb\x1b\x66\x5f\x8e\xf9\x0f\xd7\x7c\x22\x56\xb0\x65\xd0\x3e\x46\xa4\xe0\x9d\x39\xfd\xc3\xba\xfd\x57\xd4\xd3\xfc\x7a\x42\xe3\xd3\xde\xea\xbd\x18\xd4\x7e\x03\xc0\x3b\xa8\x53\xf3\x35\x84\xe2\x98\x95\xdd\xdc\x6d\xdb\x6f\xc8\x7c\x7b\xfc\xa7\x45\x60\xd2\x17\xa3\xc5\x86\x88\x0d\x70\x4c\x4d\x19\x26\xf6\x51\x95\xd8\x5f\x49\xc5\xe9\x33\xd7\x79\xa2\xf5\x28\xfc\xf9\xd7\xe2\xef\x00\x00\x00\xff\xff\xb4\xb0\x0d\xe8\x95\x11\x00\x00")

func clusterBytebuildersDev_clusterauthinfotemplatesYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clusterauthinfotemplatesYaml,
		"cluster.bytebuilders.dev_clusterauthinfotemplates.yaml",
	)
}

func clusterBytebuildersDev_clusterauthinfotemplatesYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clusterauthinfotemplatesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusterauthinfotemplates.yaml", size: 4501, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBytebuildersDev_clusterinfosYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x41\x6f\x23\x37\x0f\xbd\xfb\x57\x10\xf8\x0e\xb9\xac\xc7\xc8\xb7\x45\x51\xf8\x16\x24\xc1\xc2\xc8\x76\x37\xd8\x2c\x72\x97\x25\x7a\xac\x46\x23\xa9\x24\xe5\xac\x5b\xf4\xbf\x17\xd2\xcc\xd8\xe3\xf1\xec\x22\x2e\xda\xb9\x89\x14\x9f\xa8\xc7\x27\x72\x54\xb4\xcf\x48\x6c\x83\x5f\x82\x8a\x16\xbf\x09\xfa\xbc\xe2\xea\xe5\x17\xae\x6c\x58\xec\xae\x67\x2f\xd6\x9b\x25\xdc\x26\x96\xd0\x7c\x41\x0e\x89\x34\xde\xe1\xc6\x7a\x2b\x36\xf8\x59\x83\xa2\x8c\x12\xb5\x9c\x01\x68\x42\x95\x8d\x5f\x6d\x83\x2c\xaa\x89\x4b\xf0\xc9\xb9\x19\x80\x53\x6b\x74\x9c\xf7\x00\xa8\x18\xab\x97\xb4\x46\xf2\x28\x58\x4e\xf1\xaa\xc1\x25\xac\xf7\x82\xeb\x64\x9d\x41\xe2\x19\x40\x6b\xd4\x2e\xb1\x20\x59\xbf\x09\x5c\x75\x8b\x6a\xb8\xb3\x32\xb8\x9b\x71\x44\x9d\xc1\x6b\x0a\x29\x1e\x82\xce\xf7\xb5\xa8\x5d\x1e\x5a\x09\xd6\x81\x6c\xbf\x9e\xc3\x31\xab\xce\x40\xdd\x7d\xe7\x4d\x30\xe8\x3a\xa3\x8a\x91\x75\x30\x58\x96\x1d\x3b\xed\x81\x2b\xbf\x09\xc5\xea\x2c\xcb\xc3\xd8\xf3\xd1\xb2\x14\x6f\x74\x89\x94\x3b\xbd\x5b\x71\xb0\xf5\x75\x72\x8a\x4e\x5c\x33\x00\xd6\x21\xe2\x01\x6b\x06\xb0\x6b\x8b\x56\x12\x9f\x77\x4c\xed\xae\x95\x8b\x5b\x75\xdd\x22\xe9\x2d\x36\xaa\xbd\x17\x40\x88\xe8\x6f\x1e\x57\xcf\xef\x9f\x4e\xcc\x00\x91\x42\x44\x92\x03\x05\xed\x37\x50\xc5\xc0\x0a\x60\x90\x35\xd9\x28\x45\x2e\x57\x19\xb0\xdd\x05\x26\xcb\x01\x19\x64\x8b\x7d\x6a\x68\xba\x1c\x20\x6c\x40\xb6\x96\x81\x30\x12\x32\x7a\x29\x12\x39\x01\x86\xbc\x49\x79\x08\xeb\xdf\x50\x4b\x05\x4f\x48\x19\x06\x78\x1b\x92\x33\xa0\x83\xdf\x21\x09\x10\xea\x50\x7b\xfb\xc7\x01\x9b\x41\x42\x39\xd4\x29\xc1\x8e\xdc\xe3\x67\xbd\x20\x79\xe5\x60\xa7\x5c\xc2\x77\xa0\xbc\x81\x46\xed\x81\x30\x9f\x02\xc9\x0f\xf0\xca\x16\xae\xe0\xd7\x40\x08\x99\xf5\x25\x6c\x45\x22\x2f\x17\x8b\xda\x4a\xff\x1a\x74\x68\x9a\xe4\xad\xec\x17\x3a\x78\x21\xbb\x4e\x12\x88\x17\x06\x77\xe8\x16\x6c\xeb\xb9\x22\xbd\xb5\x82\x5a\x12\xe1\x42\x45\x3b\x2f\xa9\x7b\x29\x4f\xaa\x31\xff\xeb\xf5\xc4\x57\x27\xb9\xca\x3e\x97\x97\x85\xac\xaf\x07\x8e\xa2\xad\x1f\x54\x20\x2b\x0c\x2c\x83\xea\x42\xdb\x5b\x1c\x89\xce\xa6\xcc\xce\x97\xfb\xa7\xaf\x07\x29\x97\x62\x8c\xd9\x2f\xbc\x1f\x03\xf9\x58\x82\x4c\x98\xf5\x1b\xa4\xb6\x88\x1b\x0a\x4d\xc1\x44\x6f\x62\xb0\x5e\xca\x42\x3b\x8b\x7e\x4c\x3f\xa7\x75\x63\x25\xd7\xfd\xf7\x84\x2c\xb9\x56\x15\xdc\x2a\xef\x83\xc0\x1a\x21\x45\xa3\x04\x4d\x05\x2b\x0f\xb7\xaa\x41\x77\xab\x18\xff\xf3\x02\x64\xa6\x79\x9e\x89\x7d\x5b\x09\x86\xdd\x6d\xbc\xb9\x65\x6d\xe0\xe8\xbb\xd0\xf1\x9b\x7e\x5f\xf9\x2b\xad\x12\xcd\x8d\x8c\x1d\x00\x9b\x40\x8d\x92\x65\xd6\xef\xcf\x3f\x9d\x79\xdb\xb3\xb3\xb6\xeb\xd2\x0a\x86\x5f\x5f\x94\x73\xcc\xef\x5c\xaf\x04\x7d\x6b\x9f\xc9\xea\xee\xa2\xb0\xd2\xff\x95\x7b\x38\xb4\xcc\xc9\x96\xf1\x36\x90\x4f\xc1\xe0\x6d\x48\x53\x89\x0f\xc8\x78\xff\xff\x8b\xc8\x70\x41\x97\x4e\x73\x51\x42\xa5\x95\x5e\x12\x10\x5e\x3d\xd2\x14\x75\xff\xbc\x8a\x05\xf2\xd3\xa5\x89\x44\x0a\x59\x8e\x97\xc6\xec\xac\x41\x3a\x0f\x42\x9f\x9a\x73\xeb\x1c\x6e\x1e\x9e\x26\xac\x77\xb6\xb6\xa2\xdc\x67\x8d\x6a\xdc\xd8\xb3\xfb\x7e\x32\xe8\xc3\xc3\xfd\x84\xf5\xa3\xf5\xfd\x68\x3d\x75\x3c\x2a\xfd\x82\xe3\x1e\x93\x1d\x4f\x5a\x39\x7c\x55\xfb\x09\xd7\x73\x72\x32\x66\xf7\x87\x84\x24\x6b\x2e\x20\x30\x77\x36\x4b\x38\x0a\x69\xe7\xf1\xc8\xd4\xc9\x64\x64\x4d\xd6\xbc\xa9\xaf\x88\x92\xc4\x6f\xed\x2c\x61\xcd\xb9\x77\x9b\x0f\xe8\x91\xbe\xf3\x02\x4e\xe6\xc8\xe7\xb3\x80\x3c\x54\x72\x5f\x6f\x02\x97\xa9\x8b\x5e\xa0\x3e\x7a\xfb\x13\xce\x60\x8b\xea\xfb\x69\xdf\x8e\x9b\x0a\x56\x02\x3a\x10\x21\xc7\xe0\xcd\x61\x62\xf7\xfe\x2b\x1e\x20\xbf\x9b\x40\x7c\xdd\x5a\xbd\xcd\x09\x75\x03\x03\x82\x87\x26\xb5\x3f\x11\xb0\xde\x17\xb0\x9b\xc7\x55\x37\xb0\xaa\x7f\xf1\x1d\xc6\xad\xe2\x89\x37\x78\xc2\xdd\x63\xde\x33\x18\x9c\xa0\x13\x51\xa6\xab\xad\x59\xfb\xf3\x83\xfd\xef\xdc\xdb\xa5\x35\xa9\x84\x33\x63\x5b\x86\x25\x08\xa5\x56\x70\x2c\x81\x54\x8d\x43\x4b\x5a\x1f\x7e\x3a\xfa\xbb\x74\x7a\x82\x3f\xff\x9a\xfd\x1d\x00\x00\xff\xff\x2a\x9b\xf3\x26\x01\x0c\x00\x00")

func clusterBytebuildersDev_clusterinfosYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clusterinfosYaml,
		"cluster.bytebuilders.dev_clusterinfos.yaml",
	)
}

func clusterBytebuildersDev_clusterinfosYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clusterinfosYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusterinfos.yaml", size: 3073, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBytebuildersDev_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x8f\xe3\x36\x0c\xbd\xe7\x57\x10\xe8\x61\x2e\x1b\x07\x83\x16\x45\xe1\xdb\x20\x2d\x8a\x41\xbf\x06\x3b\x8b\xbd\xd3\x12\x63\x6b\x47\x96\x54\x92\x4a\x9b\x16\xfd\xef\x85\x64\x3b\xf1\x24\x8b\x69\x2f\x9b\x53\xf4\x48\x3d\xd1\xef\x91\xc4\xe4\x3e\x12\x8b\x8b\xa1\x05\x4c\x8e\xfe\x54\x0a\xe5\x24\xcd\xcb\x77\xd2\xb8\xb8\x3b\xde\x6f\x5e\x5c\xb0\x2d\xec\xb3\x68\x1c\xdf\x93\xc4\xcc\x86\xbe\xa7\x83\x0b\x4e\x5d\x0c\x9b\x91\x14\x2d\x2a\xb6\x1b\x00\xc3\x84\x05\xfc\xe0\x46\x12\xc5\x31\xb5\x10\xb2\xf7\x1b\x00\x8f\x1d\x79\x29\x39\x00\x98\x52\xf3\x92\x3b\xe2\x40\x4a\xf5\x95\x80\x23\xb5\xd0\x9d\x94\xba\xec\xbc\x25\x96\x0d\xc0\x04\x1a\x9f\x45\x89\xa5\x99\xff\x34\xeb\xac\xc6\xd2\x71\x23\x89\x4c\x21\xee\x39\xe6\x74\xbe\x70\x9b\x37\x31\xce\x35\x18\x54\xea\x23\xbb\xe5\xbc\x85\x4b\x45\x33\x80\x29\x89\x89\x96\xea\x71\x16\x61\xe2\xae\x88\x77\xa2\x3f\xad\xd1\x9f\x9d\x68\x8d\x24\x9f\x19\xfd\xa5\xf4\x0a\x8a\x0b\x7d\xf6\xc8\x67\x78\x03\x20\x26\x26\x6a\xe1\xd7\x52\x56\x42\x43\x76\x03\x70\x9c\xec\xa8\x65\x6d\x01\xad\xad\x2a\xa3\x7f\x62\x17\x94\x78\x1f\x7d\x1e\xc3\xb9\xe8\x4f\x12\xc3\x13\xea\xd0\x42\xb3\xf8\xd0\xdc\x98\x50\x73\x17\x3d\x1f\x7a\x9a\xcf\x7a\x2a\x8f\x5b\xd4\x09\x98\xc2\xc7\x7b\xf4\x69\xc0\xfb\xa9\x66\x33\xd0\x88\xed\x9c\x1f\x13\x85\x87\xa7\xc7\x8f\x5f\x3f\xbf\x82\x01\x12\xc7\x44\xac\x67\x2d\xa7\xdf\xaa\xb5\x56\x28\x80\x25\x31\xec\x92\xd6\x9e\xbb\x2b\x84\x53\x16\xd8\xd2\x53\x24\xa0\x03\x2d\x2a\x90\x9d\x6b\x80\x78\x00\x1d\x9c\x00\x53\x62\x12\x0a\x5a\x3f\xf1\x15\x31\x94\x24\x0c\x10\xbb\x4f\x64\xb4\x81\x67\xe2\x42\x03\x32\xc4\xec\x2d\x98\x18\x8e\xc4\x0a\x4c\x26\xf6\xc1\xfd\x75\xe6\x16\xd0\x58\x1f\xf5\xa8\x34\x5b\x78\xf9\x55\xd5\x03\x7a\x38\xa2\xcf\xf4\x0e\x30\x58\x18\xf1\x04\x4c\xe5\x15\xc8\x61\xc5\x57\x53\xa4\x81\x5f\x22\x13\xb8\x70\x88\x2d\x0c\xaa\x49\xda\xdd\xae\x77\xba\x8c\x94\x89\xe3\x98\x83\xd3\xd3\xce\xc4\xa0\xec\xba\xac\x91\x65\x67\xe9\x48\x7e\x27\xae\xdf\x22\x9b\xc1\x29\x19\xcd\x4c\x3b\x4c\x6e\x5b\x4b\x0f\x5a\xe7\x72\xb4\x5f\xf1\x3c\x84\x72\xf7\xaa\xd6\xc9\x4f\x51\x76\xa1\x5f\x05\x6a\xe7\xbe\xe1\x40\xe9\x61\x70\x02\x38\x5f\x9d\xbe\xe2\x22\x74\x81\x8a\x3a\xef\x7f\x78\xfe\x00\xcb\xd3\xd5\x8c\x6b\xf5\xab\xee\x97\x8b\x72\xb1\xa0\x08\xe6\xc2\x81\x78\x32\xf1\xc0\x71\xac\x9c\x14\x6c\x8a\x2e\x68\x3d\x18\xef\x28\x5c\xcb\x2f\xb9\x1b\x9d\x16\xdf\x7f\xcf\x24\x5a\xbc\x6a\x60\x8f\x21\x44\x85\x8e\x20\xa7\xd2\xbf\xb6\x81\xc7\x00\x7b\x1c\xc9\xef\x51\xe8\x8b\x1b\x50\x94\x96\x6d\x11\xf6\xff\x59\xb0\x5e\x91\xd7\xc9\x93\x6a\xab\xc0\xb2\xce\xfe\x3b\x51\x51\xb3\xbc\x4e\xfd\xfc\x28\x4e\xee\x48\x31\xc3\xfe\x48\x81\xb8\x0e\xcf\x75\xc6\x55\x63\xfc\x76\x73\xa1\x74\x49\x31\x6a\x8c\x52\xc7\x88\x82\x42\x7f\x89\x2e\x2f\xdc\xd0\x02\x1c\xe2\xec\xfc\xbc\x2a\x1b\x78\x54\x30\x91\x99\x24\xc5\x60\xcf\x13\x38\x87\xef\x64\xc5\xfb\x0e\xfe\x18\x9c\x19\x3e\xc3\xea\x64\xf1\x1f\x62\x80\x31\x4f\x3b\x01\xba\x53\xe5\x7a\x78\x7a\x9c\xfb\xaf\xb9\xb9\x7b\x88\x3c\xa2\xb6\x65\xb8\xbf\xfd\xe6\x26\x3a\xe9\x5d\x06\xbf\x9f\x77\xfd\x9b\x4e\xdc\x80\x93\x0c\x2d\x28\xe7\x69\xb5\x8a\x46\xc6\x9e\xd6\x48\xee\xce\x53\xbc\xf8\x30\xfb\x09\x7f\xff\xb3\xf9\x37\x00\x00\xff\xff\xd6\xd2\x64\xd4\x97\x07\x00\x00")

func clusterBytebuildersDev_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clustersYaml,
		"cluster.bytebuilders.dev_clusters.yaml",
	)
}

func clusterBytebuildersDev_clustersYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusters.yaml", size: 1943, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBytebuildersDev_clusteruserauthsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x8f\xdb\x36\x0c\x7f\xcf\xa7\x20\xb0\x87\xbe\x34\x09\x8a\x0d\xc3\x90\xb7\xc3\xf5\x50\x1c\xda\xae\x87\xde\xb5\xef\xb2\x4c\x3b\xda\xd9\x92\x47\xd2\xb9\xcb\x86\x7d\xf7\x41\x92\x9d\x38\xfe\x77\xb9\x0c\x9d\xdf\x2c\x51\x14\xf9\x23\xf9\x13\x25\x55\x99\xef\x48\x6c\x9c\xdd\x80\xaa\x0c\x3e\x0b\x5a\xff\xc7\xab\xc7\xdf\x78\x65\xdc\x7a\xf7\x6e\xf1\x68\x6c\xba\x81\xeb\x9a\xc5\x95\x5f\x91\x5d\x4d\x1a\xdf\x63\x66\xac\x11\xe3\xec\xa2\x44\x51\xa9\x12\xb5\x59\x00\x68\x42\xe5\x07\x1f\x4c\x89\x2c\xaa\xac\x36\x60\xeb\xa2\x58\x00\x14\x2a\xc1\x82\xbd\x0c\x80\xaa\xaa\xd5\x63\x9d\x20\x59\x14\x0c\xbb\x58\x55\xe2\x06\x92\xbd\x60\x52\x9b\x22\x45\xe2\x05\x40\x1c\xd4\x45\xcd\x82\x54\x33\x92\xaa\x65\xcb\xab\x66\x60\xd5\x95\x5e\xa5\xb8\x5b\x70\x85\xda\x6f\x90\x93\xab\xab\xc3\xc2\xa1\x5c\xd4\xdc\xd8\xa2\x95\x60\xee\xc8\xb4\xff\x4b\x38\x5a\xd6\x0c\x50\xe3\xf3\xb2\x74\x29\x16\xcd\xa0\xaa\x2a\xd6\x2e\xc5\xf0\xdb\x20\x14\x37\xfc\xc6\x48\x57\xb5\x6c\xc3\x4c\x61\x58\x3e\x8e\xcd\x7e\x32\x2c\x41\xa2\x2a\x6a\x52\xc5\xd0\xcf\x30\xc9\xc6\xe6\x75\xa1\x68\x30\xbd\x00\x60\xed\x2a\x3c\xe8\x5d\x00\xec\x62\x20\x83\x23\xcb\x06\xbd\xdd\x3b\x55\x54\x5b\xf5\x2e\x6a\xd3\x5b\x2c\x55\xf4\x13\xc0\x55\x68\xaf\xee\x6e\xbf\xff\x7c\x7f\x32\x0c\x50\x91\xab\x90\xe4\x00\x49\xfc\x3a\x99\xd2\x19\x05\x48\x91\x35\x99\x4a\x42\x0a\xbd\xf1\x0a\xa3\x14\xa4\x3e\x45\x90\x41\xb6\xd8\x9a\x86\x69\x63\x03\xb8\x0c\x64\x6b\x18\x08\x2b\x42\x46\x2b\x21\x6d\x4e\x14\x83\x17\x52\x16\x5c\xf2\x07\x6a\x59\xc1\x3d\x92\x57\x03\xbc\x75\x75\x91\x82\x76\x76\x87\x24\x40\xa8\x5d\x6e\xcd\x5f\x07\xdd\x0c\xe2\xc2\xa6\x85\x12\x6c\x40\x3e\x7e\xc6\x0a\x92\x55\x05\xec\x54\x51\xe3\x5b\x50\x36\x85\x52\xed\x81\xd0\xef\x02\xb5\xed\xe8\x0b\x22\xbc\x82\xcf\x8e\x10\x8c\xcd\xdc\x06\xb6\x22\x15\x6f\xd6\xeb\xdc\x48\x5b\x21\xda\x95\x65\x6d\x8d\xec\xd7\xda\x59\x21\x93\xd4\xe2\x88\xd7\x29\xee\xb0\x58\xb3\xc9\x97\x8a\xf4\xd6\x08\x6a\xa9\x09\xd7\xaa\x32\xcb\x60\xba\x95\x50\x66\x65\xfa\x53\x9b\x5f\xfc\xe6\xc4\x56\xd9\xfb\xf0\xb2\x90\xb1\x79\x67\x22\xe4\xda\x4c\x04\x7c\xb6\x81\x61\x50\xcd\xd2\xe8\xc5\x11\x68\x3f\xe4\xd1\xf9\x7a\x73\xff\x70\x48\xed\x10\x8c\x3e\xfa\x01\xf7\xe3\x42\x3e\x86\xc0\x03\x66\x6c\x86\x14\x83\x98\x91\x2b\x83\x4e\xb4\x69\xe5\x8c\x95\xf0\xa3\x0b\x83\xb6\x0f\x3f\xd7\x49\x69\xc4\xc7\xfd\xcf\x1a\x59\x7c\xac\x56\x70\xad\xac\x75\x02\x09\x42\x5d\xa5\x4a\x30\x5d\xc1\xad\x85\x6b\x55\x62\x71\xad\x18\x7f\x78\x00\x3c\xd2\xbc\xf4\xc0\x9e\x17\x82\x2e\xe3\xf5\x85\x23\x6a\x9d\x89\x96\x95\x8e\xdf\x78\x7d\xf9\xcf\x57\xf6\x1d\xb9\x9d\x49\x91\xfa\x73\xbd\x38\x5f\x75\x44\xc3\x1e\x26\x33\xe8\xa3\xae\x03\x4f\x07\x55\xde\x45\x1d\x0a\xcb\xb3\x4c\x6e\xfa\xf5\xe5\xbf\xcc\x51\x88\xd6\x91\xf5\x0e\xc4\x39\x90\x9e\x36\xdc\x7f\xda\xd9\xcc\xe4\x63\x33\x00\x2a\x4d\xc3\x61\xa1\x8a\xbb\x59\x1d\x30\x0d\x7a\x5f\x60\x00\x74\xfb\x05\xe2\x9b\x59\x38\xa1\xd9\x67\xa4\x21\x4c\x87\x4b\x23\x97\x0e\x86\x67\xcc\x50\x4f\x23\xde\xcd\xa3\xa7\xb4\x46\xe6\x8f\xb8\xbf\x7d\x7f\x81\xf1\x00\x8a\xb9\x2e\xf1\xab\x2b\xf0\x8a\xec\x7f\xd4\x70\xf3\x1c\x39\xf2\x42\x53\xb4\xd2\xdb\xd9\x08\x24\xce\x15\xa8\xc6\xb2\xb1\x49\xbd\x0b\x37\xce\x1c\x3d\x29\x4a\xef\x91\xfd\x61\xf3\xfb\x0b\x79\x30\x6d\x05\x61\x3e\x38\xe6\xce\x34\x81\x51\x13\xca\x55\x1b\xcc\x0b\x75\x9c\x65\xff\x05\x79\xdc\x49\xb2\x91\xd9\x9e\xed\xaf\x49\xf8\xc8\xf5\xd7\x3e\xbd\x33\x4f\x39\xf8\x7e\x40\x8f\xd0\x67\xb0\xeb\xb1\x35\x9e\x45\x44\x19\xcb\x70\x77\xf3\x79\x89\xd6\xb7\x58\x29\x78\xb2\x0d\xa7\xcc\x58\xda\x36\x9b\x83\xf6\xdd\x40\x66\x0a\x0c\x9c\xf6\xf0\xe9\x7e\x48\x60\x99\xa3\x52\x49\x6c\x34\x27\xdc\x1b\x45\x35\xee\xf0\x11\xf7\x67\xbb\xd5\xc8\xbe\xe0\xce\xc1\xf8\x11\xbf\x1e\x71\xff\xc3\xbc\x89\x9d\xe8\x58\x95\xcd\x2c\xcb\x9d\xcb\x0b\xfc\xe2\x0f\x9e\xcb\xc8\xed\xc1\x3d\xe2\x65\x55\x15\x41\xba\x94\x8e\xc2\xe2\xfb\x90\xdc\x17\x29\xc0\xe7\xca\xd0\x44\x29\xb7\x31\x30\x56\x7e\xfd\x65\x46\xb9\x6f\x3b\xf3\xd0\xa5\xf7\x3f\xc2\x8c\x90\xb7\x97\x82\xf3\x72\xb9\x07\xcd\x23\xb3\x2d\xa8\x93\x53\x11\xb2\xd7\xd0\x80\x29\x2b\x24\x76\x56\xc9\x08\x73\x9d\x54\xc9\xed\x51\xd2\x37\xab\xbe\x03\xf1\x57\x1b\x7f\xd0\xfa\xf6\x5d\x69\x59\x2a\x1e\xa6\xfc\x0c\x14\x9d\xbd\x3f\xf8\x0b\xe0\x48\x22\x4e\x59\x10\xe5\x5b\x3b\xf2\xf8\x27\xae\xab\x72\x68\x8a\x11\x2c\x47\x93\x7d\x36\x5c\x71\x52\x11\xa9\x3e\xbf\x76\x36\xf3\x77\xc4\x9b\x67\xa1\x11\xaa\x39\xb7\x91\x3a\x71\x35\xe8\xfa\x1e\xae\x01\xa5\xe2\xc7\xe6\x4a\x16\xfe\xd9\xf9\xd2\x15\x97\xd4\x19\x68\x65\x21\x47\x8b\xa4\x46\xf8\x64\xc6\xe1\x17\x0b\x68\xda\xe9\xe9\x98\x1c\x30\x38\x52\xe8\xd1\xf7\x70\x17\xf0\x85\x37\xbc\x33\x42\xd3\xd3\x76\xe0\x4c\x43\x6a\x4d\x25\xd3\x68\x22\x57\x8a\xf9\xc9\xd1\x48\x55\x9d\xd8\x7b\xd7\x88\xb5\xa9\xd3\x2e\x0b\x16\x24\x8a\x8d\xee\xf7\xe1\xe2\xc6\xf0\x39\xb3\xff\x9e\x81\xb9\x3a\xef\xd6\x70\xb8\x31\xc4\x53\x1e\x02\x37\x40\xa5\x48\x95\xfd\xeb\xdf\xec\x76\x32\xce\x56\x27\x7b\x45\xdd\x0d\x32\x09\x2a\xf2\xd7\xc5\x30\xe6\xd1\x19\xe0\xd2\x43\x61\xba\x39\x7c\x15\x2e\x3e\xf2\x63\xe7\xc6\x3c\x6f\xcf\x71\x76\x4b\x53\x2f\x78\xff\xad\x65\xb3\x3e\xbb\xfd\xcf\xa9\x31\x7e\x3e\x2c\x3b\x4d\x40\x6f\x22\x22\x76\xd6\xcd\x56\x94\xd4\x7c\xee\xdd\xd6\x25\x8c\xb4\xc3\xf4\x43\x64\x98\xd1\x06\xfb\x04\xc1\x2f\x83\x05\x2d\x96\xa5\xe3\xf0\xee\xe3\xbb\xbe\xfc\x38\xdb\xee\x30\x79\xcb\x0d\xef\x4d\xf1\xc1\x63\x05\xb7\x02\xda\x11\x21\x57\xce\xa6\x87\x37\xa3\x76\xfe\x0d\x77\x34\xbf\x1d\xd1\xf8\xb4\x35\x7a\xeb\x0d\x6a\x9e\x2c\xc0\x59\x28\xeb\xf8\x8c\x05\xc9\x3e\x28\xbb\xba\xbb\x6d\x9e\x4c\xa6\x9b\xb7\xd7\x26\xe0\x68\x2c\x06\x83\x11\x88\x0d\x08\xd5\x91\xca\x59\x1c\xa9\x1c\xbb\x23\x75\x72\x78\x78\x6a\x23\xd1\x44\x14\xfe\xfe\x67\xf1\x6f\x00\x00\x00\xff\xff\xe0\xd4\x11\x8b\x19\x16\x00\x00")

func clusterBytebuildersDev_clusteruserauthsYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clusteruserauthsYaml,
		"cluster.bytebuilders.dev_clusteruserauths.yaml",
	)
}

func clusterBytebuildersDev_clusteruserauthsYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clusteruserauthsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusteruserauths.yaml", size: 5657, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.bytebuilders.dev_cloudcredentials.yaml":         clusterBytebuildersDev_cloudcredentialsYaml,
	"cluster.bytebuilders.dev_clusterauthinfotemplates.yaml": clusterBytebuildersDev_clusterauthinfotemplatesYaml,
	"cluster.bytebuilders.dev_clusterinfos.yaml":             clusterBytebuildersDev_clusterinfosYaml,
	"cluster.bytebuilders.dev_clusters.yaml":                 clusterBytebuildersDev_clustersYaml,
	"cluster.bytebuilders.dev_clusteruserauths.yaml":         clusterBytebuildersDev_clusteruserauthsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.bytebuilders.dev_cloudcredentials.yaml":         {clusterBytebuildersDev_cloudcredentialsYaml, map[string]*bintree{}},
	"cluster.bytebuilders.dev_clusterauthinfotemplates.yaml": {clusterBytebuildersDev_clusterauthinfotemplatesYaml, map[string]*bintree{}},
	"cluster.bytebuilders.dev_clusterinfos.yaml":             {clusterBytebuildersDev_clusterinfosYaml, map[string]*bintree{}},
	"cluster.bytebuilders.dev_clusters.yaml":                 {clusterBytebuildersDev_clustersYaml, map[string]*bintree{}},
	"cluster.bytebuilders.dev_clusteruserauths.yaml":         {clusterBytebuildersDev_clusteruserauthsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
