/*
Copyright 2020 AppsCode Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.bytebuilders.dev/resource-model/apis/identity/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrgUserLister helps list OrgUsers.
type OrgUserLister interface {
	// List lists all OrgUsers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OrgUser, err error)
	// Get retrieves the OrgUser from the index for a given name.
	Get(name string) (*v1alpha1.OrgUser, error)
	OrgUserListerExpansion
}

// orgUserLister implements the OrgUserLister interface.
type orgUserLister struct {
	indexer cache.Indexer
}

// NewOrgUserLister returns a new OrgUserLister.
func NewOrgUserLister(indexer cache.Indexer) OrgUserLister {
	return &orgUserLister{indexer: indexer}
}

// List lists all OrgUsers in the indexer.
func (s *orgUserLister) List(selector labels.Selector) (ret []*v1alpha1.OrgUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrgUser))
	})
	return ret, err
}

// Get retrieves the OrgUser from the index for a given name.
func (s *orgUserLister) Get(name string) (*v1alpha1.OrgUser, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("orguser"), name)
	}
	return obj.(*v1alpha1.OrgUser), nil
}
